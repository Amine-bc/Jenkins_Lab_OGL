buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.sun.mail:javax.mail:1.6.2'
    }
}

plugins {
    id 'java'
    id 'maven-publish'
    id("com.github.spacialcircumstances.gradle-cucumber-reporting") version "0.1.25"
    id 'jacoco'
    id("org.sonarqube") version "4.4.0.3356"
    id("de.zebrajaeger.sendMail") version "0.1.1"
}


group = 'com.example'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

cucumberReports {
    outputDir = file('build/reports/cucumber')
    buildId = '0'
    reports = files('build/reports/cucumber/json/test-results.json')
}

dependencies {
//    testImplementation platform('org.junit:junit-bom:5.10.0')
//    testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation 'io.cucumber:cucumber-java:6.0.0'
    testImplementation 'io.cucumber:cucumber-junit:6.0.0'
    testImplementation 'junit:junit:4.12'
    implementation 'com.sun.mail:javax.mail:1.6.2'
}

test {
    finalizedBy jacocoTestReport // report is always generated after tests run
    finalizedBy 'sonar'
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    reports {

        xml.required = false
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
}

sonar {
    properties {

        property "sonar.login", "c516b00596e40ab1580150e7a6299cf096900f2c"
        property "sonar.projectKey", "myProjectKey"
        property "sonar.host.url", "http://197.140.142.82:9000/"
        property "sonar.java.binaries", "build/classes/java/main"
        property "sonar.sources", "src/main/java"
        property "sonar.tests", "src/test/java"

    }
}

publishing {
    repositories {
        maven {
            url 'https://mymavenrepo.com/repo/vl5BUEJf7IpuxkRtNhwD/'


            credentials {
                username 'myMavenRepo'
                password 'test'
            }
        }
    }


    publications {
        mavenJava(MavenPublication) {
            from components.java

        }
    }
}




task buildAndPublish {
    group = "Build"
    description = "Runs build, tests, and publishes the project."

    dependsOn 'build'  // Ensure the build task runs first
    dependsOn 'publish'  // Publish after build and test

    doLast {
        println "Build and Publish completed successfully for project ${project.name}, version ${project.version}!"
    }
}